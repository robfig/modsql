// MACHINE GENERATED BY ModSQL (github.com/kless/modsql)

package tester

import (
	"database/sql"
	"time"

	"github.com/kless/modsql"
)

// == EDIT
const ENGINE = modsql.Postgres

//const ENGINE = modsql.MySQL
//const ENGINE = modsql.SQLite

// * * *

var Insert = modsql.NewStatements(map[int]string{
	0:  "INSERT INTO types (int_, int8_, int16_, int32_, int64_, float32_, float64_, string_, binary_, byte_, rune_, bool_) VALUES({P}, {P}, {P}, {P}, {P}, {P}, {P}, {P}, {P}, {P}, {P}, {P})",
	1:  "INSERT INTO default_value (id, int8_, float32_, string_, binary_, byte_, rune_, bool_) VALUES({P}, {P}, {P}, {P}, {P}, {P}, {P}, {P})",
	2:  "INSERT INTO times (typeId, datetime) VALUES({P}, {P})",
	3:  "INSERT INTO account (acc_num, acc_type, acc_descr) VALUES({P}, {P}, {P})",
	4:  "INSERT INTO sub_account (sub_acc, ref_num, ref_type, sub_descr) VALUES({P}, {P}, {P}, {P})",
	5:  "INSERT INTO catalog (catalog_id, name, description, price) VALUES({P}, {P}, {P}, {P})",
	6:  "INSERT INTO magazine (catalog_id, page_count) VALUES({P}, {P})",
	7:  "INSERT INTO mp3 (catalog_id, size, length, filename) VALUES({P}, {P}, {P}, {P})",
	8:  "INSERT INTO book (book_id, title, author) VALUES({P}, {P}, {P})",
	9:  "INSERT INTO chapter (chapter_id, title, book_fk) VALUES({P}, {P}, {P})",
	10: "INSERT INTO {Q}user{Q} (user_id, first_name, last_name) VALUES({P}, {P}, {P})",
	11: "INSERT INTO address (address_id, street, city, state, post_code) VALUES({P}, {P}, {P}, {P}, {P})",
	12: "INSERT INTO user_address (user_id, address_id) VALUES({P}, {P})",
})

// sex
const (
	SEX_FEMALE = iota
	SEX_MALE
)

type Types struct {
	Int_     int
	Int8_    int8
	Int16_   int16
	Int32_   int32
	Int64_   int64
	Float32_ float32
	Float64_ float64
	String_  string
	Binary_  []byte
	Byte_    byte
	Rune_    rune
	Bool_    bool
}

func (t *Types) Args() []interface{} {
	return []interface{}{&t.Int_, &t.Int8_, &t.Int16_, &t.Int32_, &t.Int64_, &t.Float32_, &t.Float64_, &t.String_, &t.Binary_, &t.Byte_, &t.Rune_, &t.Bool_}
}

func (t *Types) StmtInsert() *sql.Stmt { return Insert.Stmt[0] }

type Default_value struct {
	Id       int
	Int8_    int8
	Float32_ float32
	String_  string
	Binary_  []byte
	Byte_    byte
	Rune_    rune
	Bool_    bool
}

func (t *Default_value) Args() []interface{} {
	return []interface{}{&t.Id, &t.Int8_, &t.Float32_, &t.String_, &t.Binary_, &t.Byte_, &t.Rune_, &t.Bool_}
}

func (t *Default_value) StmtInsert() *sql.Stmt { return Insert.Stmt[1] }

type Times struct {
	TypeId   int
	Datetime time.Time
}

func (t *Times) Args() []interface{} {
	return []interface{}{&t.TypeId, &t.Datetime}
}

func (t *Times) StmtInsert() *sql.Stmt { return Insert.Stmt[2] }

type Account struct {
	Acc_num   int
	Acc_type  int
	Acc_descr string
}

func (t *Account) Args() []interface{} {
	return []interface{}{&t.Acc_num, &t.Acc_type, &t.Acc_descr}
}

func (t *Account) StmtInsert() *sql.Stmt { return Insert.Stmt[3] }

type Sub_account struct {
	Sub_acc   int
	Ref_num   int
	Ref_type  int
	Sub_descr string
}

func (t *Sub_account) Args() []interface{} {
	return []interface{}{&t.Sub_acc, &t.Ref_num, &t.Ref_type, &t.Sub_descr}
}

func (t *Sub_account) StmtInsert() *sql.Stmt { return Insert.Stmt[4] }

type Catalog struct {
	Catalog_id  int
	Name        string
	Description string
	Price       float32
}

func (t *Catalog) Args() []interface{} {
	return []interface{}{&t.Catalog_id, &t.Name, &t.Description, &t.Price}
}

func (t *Catalog) StmtInsert() *sql.Stmt { return Insert.Stmt[5] }

type Magazine struct {
	Catalog_id int
	Page_count string
}

func (t *Magazine) Args() []interface{} {
	return []interface{}{&t.Catalog_id, &t.Page_count}
}

func (t *Magazine) StmtInsert() *sql.Stmt { return Insert.Stmt[6] }

type Mp3 struct {
	Catalog_id int
	Size       int
	Length     float32
	Filename   string
}

func (t *Mp3) Args() []interface{} {
	return []interface{}{&t.Catalog_id, &t.Size, &t.Length, &t.Filename}
}

func (t *Mp3) StmtInsert() *sql.Stmt { return Insert.Stmt[7] }

type Book struct {
	Book_id int
	Title   string
	Author  string
}

func (t *Book) Args() []interface{} {
	return []interface{}{&t.Book_id, &t.Title, &t.Author}
}

func (t *Book) StmtInsert() *sql.Stmt { return Insert.Stmt[8] }

type Chapter struct {
	Chapter_id int
	Title      string
	Book_fk    int
}

func (t *Chapter) Args() []interface{} {
	return []interface{}{&t.Chapter_id, &t.Title, &t.Book_fk}
}

func (t *Chapter) StmtInsert() *sql.Stmt { return Insert.Stmt[9] }

type User struct {
	User_id    int
	First_name string
	Last_name  string
}

func (t *User) Args() []interface{} {
	return []interface{}{&t.User_id, &t.First_name, &t.Last_name}
}

func (t *User) StmtInsert() *sql.Stmt { return Insert.Stmt[10] }

type Address struct {
	Address_id int
	Street     string
	City       string
	State      string
	Post_code  string
}

func (t *Address) Args() []interface{} {
	return []interface{}{&t.Address_id, &t.Street, &t.City, &t.State, &t.Post_code}
}

func (t *Address) StmtInsert() *sql.Stmt { return Insert.Stmt[11] }

type User_address struct {
	User_id    int
	Address_id int
}

func (t *User_address) Args() []interface{} {
	return []interface{}{&t.User_id, &t.Address_id}
}

func (t *User_address) StmtInsert() *sql.Stmt { return Insert.Stmt[12] }
