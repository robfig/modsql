// Copyright 2010 Jonas mg
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

package modsql

import (
	"bytes"
	"database/sql"
	"fmt"
	"io"
	"log"
	"os"
	"runtime"
	"strings"
	"text/template"
)

const (
	_FILE_NAME  = "modsql" // name of files to generate
	_CONSTRAINT = "// build "
	_HEADER     = "// MACHINE GENERATED BY ModSQL (github.com/kless/modsql); DO NOT EDIT\n"
)

var _log = log.New(os.Stderr, "ERROR: ", 0)

// Load loads a database from a file created by modsql.
func Load(db *sql.DB, filename string) error {
	tmpl, err := template.New("").ParseFiles(filename)
	if err != nil {
		return err
	}

	// Value for the SQL engine's integer according to the architecture.
	intSQLString := struct {
		MySQLInt   string
		PostgreInt string
	}{
		// architecture of 64-bits
		"BIGINT",
		"bigint",
	}

	if runtime.GOARCH != "amd64" {
		intSQLString.MySQLInt = "INT"
		intSQLString.PostgreInt = "integer"
	}

	buf := new(bytes.Buffer)
	if err = tmpl.Execute(buf, intSQLString); err != nil {
		return err
	}

	for firstLine := ""; ; {
		line, err := buf.ReadString('\n')
		if err == io.EOF {
			break
		}

		line = strings.TrimSpace(line)
		if line == "" || strings.HasPrefix(line, "//") {
			continue
		}

		firstLine += line

		if !strings.HasSuffix(line, ";") {
			continue
		}
		if _, err = db.Exec(firstLine); err != nil {
			return fmt.Errorf("SQL line: %s\n%s", firstLine, err)
		}
		firstLine = ""
	}

	return nil
}
