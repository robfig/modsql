// MACHINE GENERATED BY ModSQL (github.com/kless/modsql)

package testdata

import (
	"fmt"
	"time"

	"github.com/kless/modsql"
)

// == EDIT
const ENGINE = modsql.PostgreSQL

//const ENGINE = modsql.MySQL
//const ENGINE = modsql.SQLite
//==

// sex
const (
	SEX_FEMALE = iota
	SEX_MALE
)

type types struct {
	t_int     int
	t_int8    int8
	t_int16   int16
	t_int32   int32
	t_int64   int64
	t_float32 float32
	t_float64 float64
	t_string  string
	t_binary  []byte
	t_byte    byte
	t_rune    rune
	t_bool    bool
}

func (t types) insert() string {
	return fmt.Sprintf("INSERT INTO types (t_int, t_int8, t_int16, t_int32, t_int64, t_float32, t_float64, t_string, t_binary, t_byte, t_rune, t_bool) VALUES(%d, %d, %d, %d, %d, %g, %g, '%s', '%s', , , %s);",
		t.t_int, t.t_int8, t.t_int16, t.t_int32, t.t_int64, t.t_float32, t.t_float64, t.t_string, t.t_binary, t.t_byte, t.t_rune, modsql.BoolToSQL(ENGINE, t.t_bool))
}

type default_value struct {
	id        int
	d_int8    int8
	d_float32 float32
	d_string  string
	d_binary  []byte
	d_byte    byte
	d_rune    rune
	d_bool    bool
}

func (t default_value) insert() string {
	return fmt.Sprintf("INSERT INTO default_value (id, d_int8, d_float32, d_string, d_binary, d_byte, d_rune, d_bool) VALUES(%d, %d, %g, '%s', '%s', , , %s);",
		t.id, t.d_int8, t.d_float32, t.d_string, t.d_binary, t.d_byte, t.d_rune, modsql.BoolToSQL(ENGINE, t.d_bool))
}

type times struct {
	typeId     int
	t_duration time.Duration
	t_datetime time.Time
}

func (t times) insert() (string, error) {
	t0, err := time.Parse(time.RFC3339, t.t_datetime.String())
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("INSERT INTO times (typeId, t_duration, t_datetime) VALUES(%d, '%s', '%s');",
		t.typeId, modsql.ReplTime.Replace(t.t_duration.String()), t0.String()), nil
}

type account struct {
	acc_num   int
	acc_type  int
	acc_descr string
}

func (t account) insert() string {
	return fmt.Sprintf("INSERT INTO account (acc_num, acc_type, acc_descr) VALUES(%d, %d, '%s');",
		t.acc_num, t.acc_type, t.acc_descr)
}

type sub_account struct {
	sub_acc   int
	ref_num   int
	ref_type  int
	sub_descr string
}

func (t sub_account) insert() string {
	return fmt.Sprintf("INSERT INTO sub_account (sub_acc, ref_num, ref_type, sub_descr) VALUES(%d, %d, %d, '%s');",
		t.sub_acc, t.ref_num, t.ref_type, t.sub_descr)
}

type catalog struct {
	catalog_id  int
	name        string
	description string
	price       float32
}

func (t catalog) insert() string {
	return fmt.Sprintf("INSERT INTO catalog (catalog_id, name, description, price) VALUES(%d, '%s', '%s', %g);",
		t.catalog_id, t.name, t.description, t.price)
}

type magazine struct {
	catalog_id int
	page_count string
}

func (t magazine) insert() string {
	return fmt.Sprintf("INSERT INTO magazine (catalog_id, page_count) VALUES(%d, '%s');",
		t.catalog_id, t.page_count)
}

type mp3 struct {
	catalog_id int
	size       int
	length     float32
	filename   string
}

func (t mp3) insert() string {
	return fmt.Sprintf("INSERT INTO mp3 (catalog_id, size, length, filename) VALUES(%d, %d, %g, '%s');",
		t.catalog_id, t.size, t.length, t.filename)
}

type book struct {
	book_id int
	title   string
	author  string
}

func (t book) insert() string {
	return fmt.Sprintf("INSERT INTO book (book_id, title, author) VALUES(%d, '%s', '%s');",
		t.book_id, t.title, t.author)
}

type chapter struct {
	chapter_id int
	title      string
	book_fk    int
}

func (t chapter) insert() string {
	return fmt.Sprintf("INSERT INTO chapter (chapter_id, title, book_fk) VALUES(%d, '%s', %d);",
		t.chapter_id, t.title, t.book_fk)
}

type user struct {
	user_id    int
	first_name string
	last_name  string
}

func (t user) insert() string {
	return fmt.Sprintf("INSERT INTO user (user_id, first_name, last_name) VALUES(%d, '%s', '%s');",
		t.user_id, t.first_name, t.last_name)
}

type address struct {
	address_id int
	street     string
	city       string
	state      string
	post_code  string
}

func (t address) insert() string {
	return fmt.Sprintf("INSERT INTO address (address_id, street, city, state, post_code) VALUES(%d, '%s', '%s', '%s', '%s');",
		t.address_id, t.street, t.city, t.state, t.post_code)
}

type user_address struct {
	user_id    int
	address_id int
}

func (t user_address) insert() string {
	return fmt.Sprintf("INSERT INTO user_address (user_id, address_id) VALUES(%d, %d);",
		t.user_id, t.address_id)
}
