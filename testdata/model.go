// MACHINE GENERATED BY ModSQL (github.com/kless/modsql)

package testdata

import (
	"fmt"
	"time"

	"github.com/kless/modsql"
)

// == EDIT
const ENGINE = modsql.Postgres

//const ENGINE = modsql.MySQL
//const ENGINE = modsql.SQLite
//==

// sex
const (
	SEX_FEMALE = iota
	SEX_MALE
)

type Types struct {
	T_int     int
	T_int8    int8
	T_int16   int16
	T_int32   int32
	T_int64   int64
	T_float32 float32
	T_float64 float64
	T_string  string
	T_binary  []byte
	T_byte    byte
	T_rune    rune
	T_bool    bool
}

func (t Types) Insert() string {
	return fmt.Sprintf("INSERT INTO types (t_int, t_int8, t_int16, t_int32, t_int64, t_float32, t_float64, t_string, t_binary, t_byte, t_rune, t_bool) VALUES(%d, %d, %d, %d, %d, %g, %g, '%s', '%s', , , %s);",
		t.T_int, t.T_int8, t.T_int16, t.T_int32, t.T_int64, t.T_float32, t.T_float64, t.T_string, t.T_binary, t.T_byte, t.T_rune, modsql.BoolToSQL(ENGINE, t.T_bool))
}

type Default_value struct {
	Id        int
	D_int8    int8
	D_float32 float32
	D_string  string
	D_binary  []byte
	D_byte    byte
	D_rune    rune
	D_bool    bool
}

func (t Default_value) Insert() string {
	return fmt.Sprintf("INSERT INTO default_value (id, d_int8, d_float32, d_string, d_binary, d_byte, d_rune, d_bool) VALUES(%d, %d, %g, '%s', '%s', , , %s);",
		t.Id, t.D_int8, t.D_float32, t.D_string, t.D_binary, t.D_byte, t.D_rune, modsql.BoolToSQL(ENGINE, t.D_bool))
}

type Times struct {
	TypeId     int
	T_duration time.Duration
	T_datetime time.Time
}

func (t Times) Insert() (string, error) {
	t0, err := time.Parse(time.RFC3339, t.T_datetime.String())
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("INSERT INTO times (typeId, t_duration, t_datetime) VALUES(%d, '%s', '%s');",
		t.TypeId, modsql.ReplTime.Replace(t.T_duration.String()), t0.String()), nil
}

type Account struct {
	Acc_num   int
	Acc_type  int
	Acc_descr string
}

func (t Account) Insert() string {
	return fmt.Sprintf("INSERT INTO account (acc_num, acc_type, acc_descr) VALUES(%d, %d, '%s');",
		t.Acc_num, t.Acc_type, t.Acc_descr)
}

type Sub_account struct {
	Sub_acc   int
	Ref_num   int
	Ref_type  int
	Sub_descr string
}

func (t Sub_account) Insert() string {
	return fmt.Sprintf("INSERT INTO sub_account (sub_acc, ref_num, ref_type, sub_descr) VALUES(%d, %d, %d, '%s');",
		t.Sub_acc, t.Ref_num, t.Ref_type, t.Sub_descr)
}

type Catalog struct {
	Catalog_id  int
	Name        string
	Description string
	Price       float32
}

func (t Catalog) Insert() string {
	return fmt.Sprintf("INSERT INTO catalog (catalog_id, name, description, price) VALUES(%d, '%s', '%s', %g);",
		t.Catalog_id, t.Name, t.Description, t.Price)
}

type Magazine struct {
	Catalog_id int
	Page_count string
}

func (t Magazine) Insert() string {
	return fmt.Sprintf("INSERT INTO magazine (catalog_id, page_count) VALUES(%d, '%s');",
		t.Catalog_id, t.Page_count)
}

type Mp3 struct {
	Catalog_id int
	Size       int
	Length     float32
	Filename   string
}

func (t Mp3) Insert() string {
	return fmt.Sprintf("INSERT INTO mp3 (catalog_id, size, length, filename) VALUES(%d, %d, %g, '%s');",
		t.Catalog_id, t.Size, t.Length, t.Filename)
}

type Book struct {
	Book_id int
	Title   string
	Author  string
}

func (t Book) Insert() string {
	return fmt.Sprintf("INSERT INTO book (book_id, title, author) VALUES(%d, '%s', '%s');",
		t.Book_id, t.Title, t.Author)
}

type Chapter struct {
	Chapter_id int
	Title      string
	Book_fk    int
}

func (t Chapter) Insert() string {
	return fmt.Sprintf("INSERT INTO chapter (chapter_id, title, book_fk) VALUES(%d, '%s', %d);",
		t.Chapter_id, t.Title, t.Book_fk)
}

type User struct {
	User_id    int
	First_name string
	Last_name  string
}

func (t User) Insert() string {
	return fmt.Sprintf("INSERT INTO user (user_id, first_name, last_name) VALUES(%d, '%s', '%s');",
		t.User_id, t.First_name, t.Last_name)
}

type Address struct {
	Address_id int
	Street     string
	City       string
	State      string
	Post_code  string
}

func (t Address) Insert() string {
	return fmt.Sprintf("INSERT INTO address (address_id, street, city, state, post_code) VALUES(%d, '%s', '%s', '%s', '%s');",
		t.Address_id, t.Street, t.City, t.State, t.Post_code)
}

type User_address struct {
	User_id    int
	Address_id int
}

func (t User_address) Insert() string {
	return fmt.Sprintf("INSERT INTO user_address (user_id, address_id) VALUES(%d, %d);",
		t.User_id, t.Address_id)
}
